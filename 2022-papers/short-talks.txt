

Saad Memon (Uni Lux)


Jo Van Bulck (KU Leuven)

Title: Towards ABI Unification for Intel SGX Enclave Shielding Runtimes

Abstract: With hardware support for trusted execution, most notably Intel
SGX, becoming widely available, recent years have seen the emergence of
numerous shielding runtimes to transparently protect enclave applications
in hostile environments. While this present diversity supports a wide range
of enclave programming languages and development paradigms, requirements at
the lowest level of the application binary interface (ABI) remain
strikingly similar. Particularly, from the untrusted side, knowledge about
the enclave binary layout is required for the loading and calling process,
and, from the trusted side, small hand-written assembly stubs are needed on
enclave entry/exit to initialize or cleanse CPU registers.

This talk and call for action analyzes the historical ABI vulnerability
landscape and argues that there is _no_ technical reason for maintaining
separate, often notoriously complex and vulnerable ABI code bases. Moving
forward, we outline challenges and opportunities for a single, unified ABI
sanitization layer that complies with best practices from software
engineering and can be scrutinized and integrated across SGX runtimes.



Lesly-Ann Daniel (KU Leuven)

Title: Towards Secure Speculation for the Constant-Time Policy

Abstract: Speculative execution is important for processor performance but
enables speculative execution attacks that undermine software-enforced
security properties, such as constant-time. Recently, hardware-software
contracts have been proposed as a way to formally reason about
hardware-based countermeasures and to enable splitting the responsibility
of ensuring security between hardware and software. An interesting
hardware-software co-design would be to let the enforcement of vanilla
constant-time up to the developers and guarantee in hardware that
speculative execution does not leak secrets. This co-design, which we call
secure speculation for the constant-time policy, ensures that vanilla
constant-time programs can be securely executed on a speculative
out-of-order processor.

In this talk, we discuss a form of hardware taint-tracking mechanism that
tracks secrets in the processor pipeline, and ensures that they do not
influence the microarchitectural state during speculative execution (Ã  la
ConTExT or SpectreGuard). We present a work-in-progress formalization of
such a taint tracking mechanism and show that it provides secure
speculation for the constant-time policy under a broad class of speculation
mechanisms, covering all known Spectre attacks, even including load value
injection (LVI) attacks. We implement this countermeasure in a prototype
processor, and propose a first feasibility evaluation regarding its costs
and benefits.




